"""
Created on Oct. 29, 2021
by Giulio Iannello

contributed by:
- Massimo Capurro Llado
- Paolo Ruggirello
- Simone Caronia

Program to anonymize a file of logs generated by moodle
Generates a table associating users to anonymous IDs

Expected json data: a list of one list of log with the following fields:
    Date/Time,
    User name
    Involved User
    Event context
    Component
    Event
    Description
    Origin
    IP adress
"""

import json
import sys
from os.path import splitext

INDEX_USER_NAME = 1
INDEX_INVOLVED_USER = 2


def fatal_error(message):
    """
    manage a fatal error: print a message and exit program
    :param message: message to be printed
    :return: None
    """
    print(message)
    exit()


def read_json_file(file_name):
    """
    read a json file and returns data
    manage exceptions
    :param file_name: file to be read
    :return: data structure corresponding to file content
    """
    try:
        fin = open(file_name)
        log_list = json.load(fin)
        fin.close()
        return log_list
    except OSError as message:
        fatal_error(message)
    except json.JSONDecodeError as message:
        fatal_error(f'*** json error *** {message}')


def write_json_file(data, file_name, indnt=3):
    """
    write data to a json file
    manage exceptions
    :param data: python object to be written to file
    :param file_name: file to be written
    :param indent:
    :return: None
    """
    try:
        fout = open(file_name, 'w')
        json.dump(data, fout, indent=indnt)
        fout.close()
    except OSError as message:
        fatal_error(message)


def user_missing(log):
    """
    check if "User name" is missing and use "Involved User" instead
    "Involved User" is eliminated anyway
    :param log: [IN/OUT] log to be processed; object is modified
    :return: None
    """
    if log[INDEX_USER_NAME] == '-' and log[INDEX_INVOLVED_USER] != '-':
        log[INDEX_USER_NAME] = log[INDEX_INVOLVED_USER]


def anonymize(log_list):
    """
    anonymize the list of logs
    :param log_list: a list of logs
    :return: the same list anonymized and without the field "Involved User"
    """
    tab_user_code = {}
    code = 1
    for log in log_list:
        user_missing(log)
        log.pop(INDEX_INVOLVED_USER)
        if not log[INDEX_USER_NAME] in tab_user_code:
            tab_user_code[log[INDEX_USER_NAME]] = str(code).zfill(5)
            code += 1
        log[INDEX_USER_NAME] = tab_user_code[log[INDEX_USER_NAME]]
    return log_list, tab_user_code


if __name__ == '__main__':
    try:
        inFname = sys.argv[1]
        name, ext = splitext(inFname)
    except IndexError as message:
        fatal_error(message)

    log_list = read_json_file(inFname)[0]  # extract the list of logs
    log_list, tab_user_code = anonymize(log_list)

    write_json_file(log_list, name + '_anonymized' + ext)
    write_json_file(tab_user_code, name + '_usercodes' + ext)

    print('Fine')
